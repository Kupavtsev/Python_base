'''
Предположим, что вам необходимо написать функцию, которая способна нахо-
дить минимальное значение из произвольного множества аргументов с произ-
вольными типами данных. То есть функция должна принимать ноль или более
аргументов – столько, сколько вы пожелаете передать. Более того, функция
должна работать со всеми типами объектов, имеющимися в языке Python: чис-
лами, строками, списками, списками словарей, файлами и даже None.
'''

# Первая версия функции извлекает первый аргумент (args – это кортеж) и об-
# ходит остальную часть коллекции, отсекая первый элемент (нет никакого
# смысла сравнивать объект сам с собой, особенно если это довольно крупная
# структура данных).

def min1(*args):
    res = args[0]
    for arg in args[1:]:
        if arg < res:
            res = arg
    return res

# Вторая версия позволяет интерпретатору самому выбрать первый аргумент
# и остаток, благодаря чему отпадает необходимость извлекать первый аргу-
# мент и получать срез.

def min2(First, *rest):
    for arg in rest:
        if arg < First:
            First = arg
    return First

# Третья версия преобразует кортеж в список с помощью встроенной функ-
# ции list и использует метод списка sort.

def min3(*args):
    tmp = list(args)
    tmp.sort()
    return tmp[0]

print(min1(3, 4, 1, 2))
print(min2("bb", "aa"))
print(min3([2,2], [1,1], [3,3]))